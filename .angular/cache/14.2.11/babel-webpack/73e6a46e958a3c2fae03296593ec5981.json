{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport * as moment from 'moment';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/person-activity.service\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/datepicker\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\nimport * as i7 from \"@angular/material/select\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"ng-apexcharts\";\nconst _c0 = [\"chartComponent\"];\nconst _c1 = [\"chartComponent1\"];\nconst _c2 = [\"chartComponent2\"];\nconst _c3 = [\"chartComponent3\"];\nfunction GenderChartsComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-form-field\")(2, \"mat-label\");\n    i0.ɵɵtext(3, \"S\\u00E9lectionner une plage de semaines\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function GenderChartsComponent_div_13_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.startWeek = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"mat-datepicker-toggle\", 15);\n    i0.ɵɵelementStart(6, \"mat-datepicker\", 16, 17);\n    i0.ɵɵlistener(\"yearSelected\", function GenderChartsComponent_div_13_Template_mat_datepicker_yearSelected_6_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.chosenYearHandler($event));\n    })(\"monthSelected\", function GenderChartsComponent_div_13_Template_mat_datepicker_monthSelected_6_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.chosenMonthHandler($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"mat-form-field\")(9, \"input\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function GenderChartsComponent_div_13_Template_input_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.endWeek = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"mat-datepicker-toggle\", 15);\n    i0.ɵɵelementStart(11, \"mat-datepicker\", 16, 19);\n    i0.ɵɵlistener(\"yearSelected\", function GenderChartsComponent_div_13_Template_mat_datepicker_yearSelected_11_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.chosenYearHandler($event));\n    })(\"monthSelected\", function GenderChartsComponent_div_13_Template_mat_datepicker_monthSelected_11_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.chosenMonthHandler($event));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function GenderChartsComponent_div_13_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.submit());\n    });\n    i0.ɵɵtext(14, \"submit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"mat-form-field\");\n    i0.ɵɵelement(16, \"input\", 21)(17, \"mat-datepicker-toggle\", 15)(18, \"mat-datepicker\", null, 22);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const _r8 = i0.ɵɵreference(7);\n    const _r9 = i0.ɵɵreference(12);\n    const _r10 = i0.ɵɵreference(19);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matDatepicker\", _r8)(\"ngModel\", ctx_r0.startWeek);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r8);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matDatepicker\", _r9)(\"ngModel\", ctx_r0.endWeek);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r9);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"matDatepicker\", _r10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r10);\n  }\n}\nfunction GenderChartsComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-form-field\");\n    i0.ɵɵelement(2, \"input\", 23)(3, \"mat-datepicker-toggle\", 15)(4, \"mat-datepicker\", null, 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-form-field\");\n    i0.ɵɵelement(7, \"input\", 21)(8, \"mat-datepicker-toggle\", 15)(9, \"mat-datepicker\", null, 22);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const _r19 = i0.ɵɵreference(5);\n    const _r20 = i0.ɵɵreference(10);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matDatepicker\", _r19);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r19);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"matDatepicker\", _r20);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r20);\n  }\n}\nfunction GenderChartsComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-form-field\");\n    i0.ɵɵelement(2, \"input\", 21)(3, \"mat-datepicker-toggle\", 15)(4, \"mat-datepicker\", null, 22);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const _r21 = i0.ɵɵreference(5);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matDatepicker\", _r21);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r21);\n  }\n}\nfunction GenderChartsComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-form-field\")(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Enter a date range\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-date-range-input\", 25);\n    i0.ɵɵelement(5, \"input\", 26);\n    i0.ɵɵelementStart(6, \"input\", 27);\n    i0.ɵɵlistener(\"dateChange\", function GenderChartsComponent_div_16_Template_input_dateChange_6_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r23.onEndDateSelected());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(7, \"mat-datepicker-toggle\", 15)(8, \"mat-date-range-picker\", null, 17);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const _r22 = i0.ɵɵreference(9);\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"rangePicker\", _r22);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", ctx_r3.startDateControl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", ctx_r3.endDateControl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r22);\n  }\n}\nexport let GenderChartsComponent = /*#__PURE__*/(() => {\n  class GenderChartsComponent {\n    constructor(personActivityService) {\n      this.personActivityService = personActivityService;\n      this.userData = [];\n      this.periodType = new FormControl(\"week\");\n      this.chart = {\n        chart: {\n          type: \"donut\",\n          id: '1'\n        },\n        series: [0, 0],\n        labels: [\"Hommes\", \"Femmes\"],\n        colors: [\"#008FFB\", \"#FF4560\"],\n        title: {\n          text: \"Répartition hommes/femmes\",\n          align: \"center\",\n          margin: 10,\n          offsetY: 20,\n          style: {\n            fontSize: \"25px\"\n          }\n        },\n        plotOptions: {\n          pie: {\n            donut: {\n              labels: {\n                show: true,\n                name: {\n                  show: true\n                },\n                value: {\n                  show: true,\n                  formatter: function (val) {\n                    return val + \" (\" + Math.round(val / this.chart.series[0].data.reduce((a, b) => a + b) * 100) + \"%)\";\n                  }\n                },\n                total: {\n                  show: true,\n                  formatter: function (val) {\n                    return Math.round(val / this.series[0].data.reduce((a, b) => a + b) * 100) + \"%\";\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n      this.ranges = Array.from(Array(52), (_, i) => `Semaine ${i + 1}`);\n      this.startDateControl = new FormControl();\n      this.endDateControl = new FormControl();\n      this.options = {\n        chart: {\n          type: 'pie'\n        },\n        labels: [],\n        series: []\n      };\n      this.chartOptions = {\n        chart: {\n          type: 'pie',\n          height: 350\n        },\n        colors: ['#6A1B9A', '#FF4081'],\n        legend: {\n          position: 'bottom'\n        },\n        responsive: [{\n          breakpoint: 480,\n          options: {\n            chart: {\n              width: 200\n            },\n            legend: {\n              position: 'bottom'\n            }\n          }\n        }],\n        labels: ['Hommes', 'Femmes']\n      };\n      this.chartOptions1 = {\n        colors: ['#6A1B9A', '#FF4081'],\n        legend: {\n          position: 'bottom'\n        },\n        labels: []\n      };\n      this.chartOptions2 = {\n        colors: ['#6A1B9A', '#FF4081'],\n        legend: {\n          position: 'bottom'\n        },\n        labels: []\n      };\n      this.chartOptions3 = {\n        chart: {\n          type: 'line'\n        },\n        xaxis: {\n          categories: []\n        }\n      };\n      this.series1 = [];\n      this.series2 = [];\n      this.series = [0, 0];\n    }\n    ngOnInit() {\n      this.weekRangeFormGroup = new FormGroup({\n        start: new FormControl(),\n        end: new FormControl(),\n        selectedRange: new FormControl()\n      });\n      this.periodType.setValue(\"range\");\n      this.year = parseInt(moment().format(\"y\"));\n      this.month = parseInt(moment().format(\"M\"));\n      this.weekNumber = parseInt(moment().format(\"w\"));\n      this.startDate = new Date(this.year, this.month);\n      this.endDate = new Date();\n      this.weekRangeFormGroup.get('selectedRange').valueChanges.subscribe(range => {\n        const [startWeek, endWeek] = range.split('-').map(Number);\n        console.log(`Plage de semaines sélectionnée : ${startWeek} à ${endWeek}`);\n      });\n      // initialisation du graphique\n    }\n\n    onEndDateSelected() {\n      let startDate = this.startDateControl.value;\n      let endDate = this.endDateControl.value;\n      let startWeekNumber = moment(startDate).week() ? moment(startDate).week() : 0;\n      let endWeekNumber = moment(endDate).week() ? moment(endDate).week() : 0;\n      let startYear = moment(startDate).year() ? moment(startDate).year() : 0;\n      let endYear = moment(endDate).year() ? moment(endDate).year() : 0;\n      this.getUserData(startWeekNumber, endWeekNumber, startYear, endYear);\n    }\n    chosenYearHandler(normalizedYear) {\n      const ctrlValue = this.startWeek || new Date();\n      ctrlValue.setFullYear(normalizedYear.getFullYear());\n      this.startWeek = ctrlValue;\n      this.endWeek = null;\n    }\n    chosenMonthHandler(normalizedMonth) {\n      const ctrlValue = this.startWeek || new Date();\n      ctrlValue.setMonth(normalizedMonth.getMonth());\n      this.startWeek = ctrlValue;\n      this.endWeek = null;\n    }\n    submit() {\n      console.log(`Plage de semaines sélectionnée : ${this.startWeek} à ${this.endWeek}`);\n    }\n    getWeekNumber(date) {\n      const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n      const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;\n      return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n    }\n    getUserData(weekStart, weekEnd, yearStart, yearEnd) {\n      this.personActivityService.getDataByDate(weekStart, weekEnd, yearStart, yearEnd).subscribe({\n        next: data => {\n          this.userData = data;\n          this.updateChart();\n          this.updateChartType();\n          this.updateChartActivity();\n          this.updateChartActivities();\n        }\n      });\n    }\n    groupActivitiesByWeek() {\n      const groupedActivities = this.userData.map(voiture => voiture.PersonActivities.map(activite => Object.assign(Object.assign({}, activite), {\n        voiture\n      }))).reduce((flatArray, activities) => flatArray.concat(activities), []).reduce((map, activite) => {\n        const key = `${activite.Week}-${activite.Year}`;\n        if (!map.has(key)) {\n          map.set(key, 0);\n        }\n        map.set(key, map.get(key) + activite.Value);\n        return map;\n        console.log(map);\n      }, new Map());\n      return groupedActivities;\n    }\n    updateChartActivities() {\n      const groupedActivities = this.groupActivitiesByWeek();\n      const chartData = Array.from(groupedActivities.entries()).map(([key, value]) => ({\n        name: key,\n        data: value\n      }));\n      const chartLabels = Array.from(groupedActivities.keys()).map(key => key.substring(0, key.indexOf('-')));\n      let tt = chartData;\n      this.chartOptions3.xaxis.categories = chartLabels;\n      this.chartComponent3.updateOptions({\n        series: tt,\n        xaxis: {\n          categories: chartLabels\n        }\n      });\n    }\n    updateChart() {\n      let chartComponent = this.chartComponent;\n      let men = this.userData.map(m => m.GenderId).filter(m => m == 1).length;\n      let women = this.userData.map(m => m.GenderId).filter(m => m == 2).length;\n      chartComponent.updateOptions({\n        series: [men, women]\n      });\n    }\n    updateChartType() {\n      const groupedVoitures = _.groupBy(this.userData, 'Status.Value');\n      const series = [];\n      const labels = [];\n      const totalCount = this.userData.length;\n      Object.keys(groupedVoitures).forEach(key => {\n        const count = groupedVoitures[key].length;\n        const percentage = Math.round(count / totalCount * 100);\n        series.push(count);\n        labels.push(`${key} (${percentage}%)`);\n      });\n      this.chartComponent1.updateOptions({\n        series: series,\n        labels: labels\n      });\n    }\n    updateChartActivity() {\n      const chartData = Object.values(this.userData.reduce((acc, voiture) => {\n        voiture.PersonActivities.forEach(activite => {\n          if (!acc[activite.Activity.Title]) {\n            acc[activite.Activity.Title] = 0;\n          }\n          acc[activite.Activity.Title] += activite.Value;\n        });\n        return acc;\n      }, {}));\n      const chartLabels = Object.keys(this.userData.reduce((acc, voiture) => {\n        voiture.PersonActivities.forEach(activite => {\n          if (!acc[activite.Activity.Title]) {\n            acc[activite.Activity.Title] = 0;\n          }\n          acc[activite.Activity.Title] += 1;\n        });\n        return acc;\n      }, {}));\n      this.chartComponent2.updateOptions({\n        series: chartData,\n        labels: chartLabels\n      });\n    }\n  }\n  GenderChartsComponent.ɵfac = function GenderChartsComponent_Factory(t) {\n    return new (t || GenderChartsComponent)(i0.ɵɵdirectiveInject(i1.PersonActivityService));\n  };\n  GenderChartsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GenderChartsComponent,\n    selectors: [[\"app-gender-charts\"]],\n    viewQuery: function GenderChartsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartComponent1 = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartComponent2 = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartComponent3 = _t.first);\n      }\n    },\n    decls: 29,\n    vars: 27,\n    consts: [[3, \"formGroup\"], [3, \"formControl\"], [\"value\", \"week\"], [\"value\", \"month\"], [\"value\", \"year\"], [\"value\", \"range\"], [4, \"ngIf\"], [\"id\", \"chart\"], [3, \"series\", \"chart\", \"colors\", \"legend\", \"responsive\", \"labels\"], [\"chartComponent\", \"\"], [\"chartComponent1\", \"\"], [\"chartComponent2\", \"\"], [3, \"series\", \"chart\", \"responsive\"], [\"chartComponent3\", \"\"], [\"matInput\", \"\", \"placeholder\", \"Semaine de d\\u00E9but\", 3, \"matDatepicker\", \"ngModel\", \"ngModelChange\"], [\"matSuffix\", \"\", 3, \"for\"], [\"startView\", \"multi-year\", \"panelClass\", \"week-picker\", 3, \"yearSelected\", \"monthSelected\"], [\"picker\", \"\"], [\"matInput\", \"\", \"placeholder\", \"Semaine de fin\", 3, \"matDatepicker\", \"ngModel\", \"ngModelChange\"], [\"picker2\", \"\"], [\"type\", \"button\", 3, \"click\"], [\"matInput\", \"\", \"placeholder\", \"Ann\\u00E9e\", 3, \"matDatepicker\"], [\"yearPicker\", \"\"], [\"matInput\", \"\", \"placeholder\", \"Mois\", 3, \"matDatepicker\"], [\"monthPicker\", \"\"], [3, \"rangePicker\"], [\"matStartDate\", \"\", \"matInput\", \"\", \"placeholder\", \"Start date\", 3, \"formControl\"], [\"matEndDate\", \"\", \"matInput\", \"\", \"placeholder\", \"End date\", 3, \"formControl\", \"dateChange\"]],\n    template: function GenderChartsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-form-field\")(2, \"mat-label\");\n        i0.ɵɵtext(3, \"Periode\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-select\", 1)(5, \"mat-option\", 2);\n        i0.ɵɵtext(6, \"Semaine\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-option\", 3);\n        i0.ɵɵtext(8, \"Mois\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-option\", 4);\n        i0.ɵɵtext(10, \"Ann\\u00E9e\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-option\", 5);\n        i0.ɵɵtext(12, \"Plage de dates\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(13, GenderChartsComponent_div_13_Template, 20, 8, \"div\", 6);\n        i0.ɵɵtemplate(14, GenderChartsComponent_div_14_Template, 11, 4, \"div\", 6);\n        i0.ɵɵtemplate(15, GenderChartsComponent_div_15_Template, 6, 2, \"div\", 6);\n        i0.ɵɵtemplate(16, GenderChartsComponent_div_16_Template, 10, 4, \"div\", 6);\n        i0.ɵɵelementStart(17, \"div\", 7);\n        i0.ɵɵelement(18, \"apx-chart\", 8, 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 7);\n        i0.ɵɵelement(21, \"apx-chart\", 8, 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 7);\n        i0.ɵɵelement(24, \"apx-chart\", 8, 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 7);\n        i0.ɵɵelement(27, \"apx-chart\", 12, 13);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.weekRangeFormGroup);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formControl\", ctx.periodType);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.periodType.value === \"week\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.periodType.value === \"month\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.periodType.value === \"year\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.periodType.value === \"range\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"series\", ctx.series)(\"chart\", ctx.chartOptions.chart)(\"colors\", ctx.chartOptions.colors)(\"legend\", ctx.chartOptions.legend)(\"responsive\", ctx.chartOptions.responsive)(\"labels\", ctx.chartOptions.labels);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"series\", ctx.series1)(\"chart\", ctx.chartOptions.chart)(\"colors\", ctx.chartOptions.colors)(\"legend\", ctx.chartOptions1.legend)(\"responsive\", ctx.chartOptions.responsive)(\"labels\", ctx.chartOptions1.labels);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"series\", ctx.series2)(\"chart\", ctx.chartOptions.chart)(\"colors\", ctx.chartOptions.colors)(\"legend\", ctx.chartOptions2.legend)(\"responsive\", ctx.chartOptions.responsive)(\"labels\", ctx.chartOptions2.labels);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"series\", ctx.series2)(\"chart\", ctx.chartOptions3.chart)(\"responsive\", ctx.chartOptions.responsive);\n      }\n    },\n    dependencies: [i2.MatFormField, i2.MatLabel, i2.MatSuffix, i3.MatInput, i4.MatDatepicker, i4.MatDatepickerInput, i4.MatDatepickerToggle, i4.MatDateRangeInput, i4.MatStartDate, i4.MatEndDate, i4.MatDateRangePicker, i5.NgIf, i6.MatOption, i7.MatSelect, i8.DefaultValueAccessor, i8.NgControlStatus, i8.NgControlStatusGroup, i8.NgModel, i8.FormControlDirective, i8.FormGroupDirective, i9.ChartComponent]\n  });\n  return GenderChartsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}